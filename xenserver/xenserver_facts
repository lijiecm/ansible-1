#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import XenAPI
import socket
import subprocess
import re
hostname = socket.gethostname()
session = XenAPI.xapi_local()
session.xenapi.login_with_password("root", "")

try:
    import json
except ImportError:
    import simplejson as json

def get_host_uuid(session, hostname):
  hosts = session.xenapi.host.get_by_name_label(hostname)
  for h in hosts:
    host_uuid = session.xenapi.host.get_uuid(h)
  return host_uuid

def get_master_uuid(session):
  pools = session.xenapi.pool.get_all()
  for p in pools:
    opaque_ref = session.xenapi.pool.get_master(p)
  master_uuid = session.xenapi.host.get_uuid(opaque_ref)
  if master_uuid == "":
    print "failed to get master"
  else:
    return master_uuid

def get_patch_list(session):
  patches = session.xenapi.host_patch.get_all()
  hotfixes = {}
  for p in patches:
    pool_patch    = session.xenapi.host_patch.get_pool_patch(p)
    patch_name    = session.xenapi.pool_patch.get_name_label(pool_patch)
    patch_status  = session.xenapi.host_patch.get_applied(p)
    hotfixes[patch_name] = patch_status
  return hotfixes

def get_dom0_mem():
  cmd = '/opt/xensource/libexec/xen-cmdline'
  p = subprocess.Popen([cmd, "--get-xen", "dom0_mem"], stdout=subprocess.PIPE)
  out, err = p.communicate()
  
  string = re.split(',', out)
  mem = re.split('=', string[0])
  return mem[1]

def get_network_list(session):
  networks = session.xenapi.network.get_all()
  network_list = {}
  for n in networks:
    facts = {}
    bridge  = session.xenapi.network.get_bridge(n)
    facts["name_label"] = session.xenapi.network.get_name_label(n)
    facts["uuid"]  = session.xenapi.network.get_uuid(n)
    facts["description"] = session.xenapi.network.get_name_description(n)
    network_list[bridge] = facts
  return network_list

def get_pif_list(session):
  interfaces = session.xenapi.PIF.get_all()
  pif_list = {}
  for f in interfaces:
    facts   = {}
    device = session.xenapi.PIF.get_device(f)
    facts["uuid"]   = session.xenapi.PIF.get_uuid(f)
    facts["ip"]     = session.xenapi.PIF.get_IP(f)
    facts["netmask"] = session.xenapi.PIF.get_netmask(f)
    facts["gateway"] = session.xenapi.PIF.get_gateway(f)
    pif_list[device] = facts
  return pif_list

facts = {}
facts['ansible_xen_hostname']     = hostname
facts['ansible_xen_host_uuid']    = get_host_uuid(session,hostname)
facts['ansible_xen_master_uuid']  = get_master_uuid(session)
facts['ansible_xen_hotfixes']     = get_patch_list(session)
facts['ansible_xen_dom0_mem']     = get_dom0_mem()
facts['ansible_xen_networks']     = get_network_list(session)
facts['ansible_xen_pifs']         = get_pif_list(session)

session.xenapi.session.logout()

result = {}
result['ansible_facts'] = facts

print json.dumps(result, sort_keys=False, indent=4)

# vi: set ts=2 sw=2 expandtab
